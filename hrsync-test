#!/usr/bin/env bash

# hrsync by Daniele Paroli
#
# simple script to backup a directory with rsync detecting moved and renamed files
#
# use it at your own risk, please see README and LICENSE files

# ------------------------------------------------------------
# Backup source and target directory 

# Source="${1%/}"
# Target="${2%/}"
# TargetHost=$3
Source="/Users/leo/rsync-test/rsync-demo/1-LOCAL"
Target="/Users/leo/rsync-test/rsync-demo/2-REMOTE"

# ------------------------------------------------------------
# Name of shadow directory
Shadow=".rsync_shadow"

# arg tests
	# Start doing things

	if [ "${Source:0:1}" != / ]
	then
		echo "Source path needs to be an absolute path"
		exit 0
	fi

	if [ "${Target:0:1}" != / ]
	then
		echo "Target path needs to be an absolute path"
		exit 0
	fi

	if [ -z "$2" ]
	then
		echo "Usage:"
		echo "	hrsync source target"
		echo "	hrsync source target remoteHost"
		echo "Example:"
		echo "	hrsync /home/user/Documents /mnt/external/Documents"
		echo "	hrsync /home/user/Documents /root/Documents root@example.com"
		echo "Please see the README file"

		exit 0
	fi

# 0) MAKE INITIAL SHADOW DIR ON SOURCE ################################################################

	if [ ! -d "$Source/$Shadow" ] 
	then
		# first time run: create source shadow
		rsync \
		-a \
		--delete \
		--link-dest="$Source" \
		`# MAKES NEW HLs if unchanged|new files found in Source` \
		--exclude="/$Shadow" \
		`# dont nest the shadow dir in itself` \
		"$Source"/ \
		"$Source/$Shadow"
	fi

# 1) SYNC SOURCE>TARGET AND COPY SHADOW DIR ################################################################
	# copies SOURCE files to TARGET
	# also copies the SOURCE SHADOW DIR to the TARGET SHADOW DIR preserving the hard links with -H. it looks for hard linked files in the SOURCE and links the same ones on the TARGET

	# do real syncronization
	if [ -z "$3" ]
	then
		# local version
		rsync \
		--progress \
		-axXhHv `# TRANSFERS HLs between files on SOURCE to TARGET, so it transfers the SOURCE/SHADOW dir` \
		--stats \
		--no-inc-recursive \
		--numeric-ids \
		--delete \
		--delete-after \
		"$Source"/ \
		"$Target"
		# NOTE: this DOES take time to transfer 1st time. 
		# completely transfers all SOURCE to TARGET including shadow dir of hard links with -H
	else
		# remote version
		rsync \
		-axXhHv \
		--stats \
		--no-inc-recursive \
		--numeric-ids \
		--delete \
		--delete-after \
		"$Source"/ \
		$TargetHost:"'$Target'"
	fi

status=$?

# BLOG POST TITLE: RSYNC: >=2-WAY SYNC, DETECT MOVED FILES, SNAPSHOT BACKUP

# 2) UPDATE/MIRROR SHADOW TO CURRENT FILESTRUCTURE ################################################################

	# if [ $status -eq 0 ]
	# then
		# update source shadow directory - SAME AS INITIAL STEP
		rsync \
		-a \
		--delete \
		--link-dest="$Source" \
		`# unchanged files are hard linked from here to SOURCE SHADOW (destination)` \
		--exclude="/$Shadow" \
		`# dont nest shadow dir in itself` \
		"$Source"/ \
		"$Source/$Shadow"
		# mirror SOURCE_SHADOW from SOURCE, deleting stuff from SOURCE_SHADOW (making new HL mirror of SOURCE), and linking SOURCE as source of finding hard linked files for renames... i think i have that right
		# FIXME: link dest is not on dest?

		#update target shadow directory
		# if [ -z "$3" ]
		# then
			# local version
			rsync \
			-a \
			--delete \
			--link-dest="$Target" \
			--exclude="/$Shadow" \
			"$Target/" \
			"$Target/$Shadow"
	# else
		# remote version
			ssh $TargetHost \
			"rsync -a --delete --link-dest='$Target' --exclude='/$Shadow' '$Target/' '$Target/$Shadow'"
	# 	fi
	# fi

# NOW JUST RENAME SOME FILES AND RUN AGAIN AND IT SHOULD JUST UPDATE NAMES ON TARGET INSTEAD OF TRANSFERRING THE ENTIRE FILE AGAIN

exit $status